<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{{.Name}} Documentation</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <style>
        :root {
            color-scheme: dark;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: #1a1a1a;
            color: #e0e0e0;
        }
        h1, h2, h3, h4, h5, h6 {
            color: #ffffff;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        a {
            color: #58a6ff;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        code {
            font-family: 'Fira Code', 'Consolas', 'Monaco', 'Andale Mono', 'Ubuntu Mono', monospace;
            padding: 0.2em 0.4em;
            border-radius: 3px;
            background: #2d2d2d;
        }
        pre {
            padding: 1rem;
            border-radius: 6px;
            background: #2d2d2d !important;
            overflow: auto;
        }
        pre code {
            padding: 0;
            background: transparent;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 1rem 0;
        }
        th, td {
            padding: 0.75rem;
            text-align: left;
            border: 1px solid #404040;
        }
        th {
            background: #2d2d2d;
        }
        tr:nth-child(even) {
            background: #252525;
        }
        .function-signature {
            font-weight: bold;
            color: #58a6ff;
        }
        .parameter-name {
            color: #ff7b72;
        }
        .parameter-type {
            color: #d2a8ff;
        }
        .parameter-description {
            color: #e0e0e0;
        }
        .nav {
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            height: 100vh;
            padding: 2rem;
            background: #252525;
            overflow-y: auto;
        }
        .content {
            margin-left: 280px;
        }
        @media (max-width: 1200px) {
            .nav {
                display: none;
            }
            .content {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
    <div class="content">
        {{.Content}}
    </div>
    <script>
        // Define our language
        Prism.languages['{{.ID}}'] = {
            'comment': {
                pattern: /#[\s\S]*?#/,
                greedy: true,
                alias: 'comment'
            },
            'string': {
                pattern: /"(?:[^"\\]|\\.)*"/,
                greedy: true,
                alias: 'string'
            },
            'number': {
                pattern: /\b\d+(?:\.\d+)?\b/,
                alias: 'constant.numeric'
            },
            'boolean': {
                pattern: /\b(?:true|false)\b/,
                alias: 'constant.language.boolean'
            },
            'null': {
                pattern: /\bnil\b/,
                alias: 'constant.language.null'
            },
            'argument-reference': {
                pattern: /\$\d+/,
                alias: 'variable.parameter'
            },
            'variable-assignment': {
                pattern: /\b[a-zA-Z_][a-zA-Z0-9_]*(?=\s*:)/,
                alias: 'variable.assign'
            },
            'function': {
                pattern: /\b[a-zA-Z_][a-zA-Z0-9_-]*(?=\s*\()/,
                greedy: true,
                alias: 'entity.name.function'
            },
            'named-argument': {
                pattern: /[a-zA-Z_][a-zA-Z0-9_]*(?=\s*=)/,
                alias: 'variable.parameter'
            },
            'operator': {
                pattern: /[:=]/,
                alias: 'keyword.operator.assignment'
            },
            'punctuation': {
                pattern: /[(),]/,
                alias: 'punctuation'
            }
        };

        // Apply theme colors
        const theme = {
            'comment': '{{.Theme.Comments}}',
            'string': '{{.Theme.Strings}}',
            'constant.numeric': '{{.Theme.Numbers}}',
            'constant.language.boolean': '{{.Theme.Constants}}',
            'constant.language.null': '{{.Theme.Constants}}',
            'variable.parameter': '{{.Theme.Parameters}}',
            'variable.assign': '{{.Theme.VariableAssignments}}',
            'entity.name.function': '{{.Theme.Functions}}',
            'keyword.operator.assignment': '{{.Theme.AssignmentOperators}}',
            'punctuation': '{{.Theme.EditorForeground}}'
        };

        // Initial highlighting
        document.addEventListener('DOMContentLoaded', (event) => {
            // First let Prism handle all code blocks
            Prism.highlightAll();

            // Apply theme colors
            const codeBlocks = document.querySelectorAll('code');
            codeBlocks.forEach(block => {
                const tokens = block.querySelectorAll('.token');
                tokens.forEach(token => {
                    const classes = Array.from(token.classList);
                    for (const cls of classes) {
                        if (theme[cls]) {
                            token.style.color = theme[cls];
                            break;
                        }
                    }
                });
            });
        });
    </script>
</body>
</html> 